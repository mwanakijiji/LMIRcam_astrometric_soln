import numpy as np
from astrom_lmircam_soln import *
from astrom_lmircam_soln import find_pinhole_centroids
from astrom_lmircam_soln import polywarp
from astrom_lmircam_soln import polywarp_v2 # the check for polywarp
from astrom_lmircam_soln import dewarp
from astrom_lmircam_soln import make_barb_plot
from astropy.io import fits
import matplotlib.pyplot as plt

#####################################################################
# MAKE A DEWARP VECTOR PLOT TO VISUALIZE THE DISTORTION

#####################################################################
# FIND THE MAPPING BETWEEN THE IDEAL AND EMPIRICAL PINHOLE COORDS 

# coefficients from the LEECH pipeline based on Maire+ 2015 measurements
Kx = [[-2.1478925,    0.0058138110,  -7.6396687e-06,   2.5359596e-09],
      [1.0109149,  -2.3826537e-05,   2.8458629e-08,  -9.3206482e-12],
      [-2.1164521e-05,   5.3115381e-08,  -6.6315643e-11,   2.2888432e-14],
      [1.2983972e-08,  -4.1253977e-11,   5.1637044e-14,  -1.5988376e-17]]
Ky = [[9.2717864,      0.98776733,   4.3514612e-06,   9.3450739e-09],
      [-0.013617797,  -3.9526096e-05,   8.1204222e-08,  -5.2048768e-11],
      [1.1313247e-05,   6.7127301e-08,  -1.6531988e-10,   1.0656544e-13],
      [1.6283111e-09,  -2.7723216e-11,   8.2118035e-14,  -5.3695050e-17]]

# map the coordinates that define the entire image plane
# note the below couple functions appear in the LEECH pipeline, and the above Kx, Ky are the same as the Kx, Ky in the LEECH pipeline
dewarp_coords = dewarp.make_dewarp_coordinates(imagePinholes.shape,
                                               np.array(Kx).T,
                                               np.array(Ky).T) # transposed due to a coefficient definition change btwn Python and IDL
#----------------------------------------------------------


# make an even grid to tack onto the pre-dewarped image; these grid points are the locations where the barbs will be
x_vec_grid_predewarp, y_vec_grid_predewarp, xIntervalsOnly, yIntervalsOnly = make_barb_plot.barb_grid()

# do the inverse fit, to find the coefficients that take us from warped coords --> dewarped coords
KxInv, KyInv = polywarp.polywarp(xIdeal_sorted,
                                 yIdeal_sorted,
                                 xFound_sorted,
                                 yFound_sorted,
                                 degree=3)

# map the points from the pre-dewarp barb grid to the post-dewarp grid 
dewarp_coords_inv = dewarp.make_dewarp_coordinates_sparseGrid(xIntervalsOnly,
                                                              yIntervalsOnly,
                                                              np.array(KxInv).T,
                                                              np.array(KyInv).T)

# remove stray array dimensions of thickness 1
x_vec_grid_postdewarp = np.squeeze(dewarp_coords_inv)[1,:,:]
y_vec_grid_postdewarp = np.squeeze(dewarp_coords_inv)[0,:,:]

# find the difference between the pre- and post-dewarp grids
x_vec_grid_diff = np.subtract(x_vec_grid_postdewarp,x_vec_grid_predewarp)
y_vec_grid_diff = np.subtract(y_vec_grid_postdewarp,y_vec_grid_predewarp)

# set cutoff distance between barb points and the pinhole locations that were actually sampled;
# this is needed to ...
N = 25. 

# ... find which barbs which are in the 'sampled' region and which are in the 'projected' region
closeOnes, farOnes = make_barb_plot.find_close_pts_cdist(np.transpose([np.ravel(x_vec_grid_predewarp),
                                                                       np.ravel(y_vec_grid_predewarp)]),
                                                         np.transpose([xFound_sorted,
                                                                       yFound_sorted]),
                                                         N)

# set up the barb (quiver) grids
sampledReg = plt.quiver((np.ravel(x_vec_grid_predewarp))[closeOnes], (np.ravel(y_vec_grid_predewarp))[closeOnes], # barbs in the sampled region
           (np.ravel(x_vec_grid_diff))[closeOnes], (np.ravel(y_vec_grid_diff))[closeOnes],color='k')
unsampledReg = plt.quiver((np.ravel(x_vec_grid_predewarp))[farOnes], (np.ravel(y_vec_grid_predewarp))[farOnes], # barbs in the projected region
           (np.ravel(x_vec_grid_diff))[farOnes], (np.ravel(y_vec_grid_diff))[farOnes],color='grey',width=0.001)

# add key
sampledKey = plt.quiverkey(sampledReg, 1.2, 0.8, 12, 'sampled region', labelpos='N',\
                           fontproperties={'weight': 'normal','size': 'medium'})
unsampledKey = plt.quiverkey(unsampledReg, 1.2, 0.6, 12, r'projection in' '\n' r'unsampled region' '\n' r'(mostly vignetted)', labelpos='N',\
                           fontproperties={'weight': 'normal','size': 'medium'})

# finally, make the barb plot
plt.axis([0.,2055.,0.,2055.])
ax = plt.axes()
ax.set_aspect(1.)
# optional: plate scale and orientation annotations, which have to be determined with find_plate_scale_and_orientation.py, using dewarped asterism images
''' 
plateScale_ann = ax.annotate("plate scale 10.69 $\pm$0.04 mas/pix\n(based on Trapezium data\ntaken UT 2016 Nov 12)",
                  xy=(1.2, 0.4), xycoords='axes fraction',
                  xytext=(1.2, 0.4), textcoords='axes fraction',
                  size=12, va="center", ha="center",
                  )
orientation_ann = ax.annotate("for true North orientation,\nrotate dewarped, derotated\nimages by $1.1^{\circ}$ W of N\n(also based on Trapezium data\ntaken UT 2016 Nov 12)",
                  xy=(1.2, 0.4), xycoords='axes fraction',
                  xytext=(1.2, 0.2), textcoords='axes fraction',
                  size=12, va="center", ha="center",
                  )
'''
axes = plt.gca()
axes.set_xlim([0,2050])
plt.title('LMIRCam Distortion Correction Map\n(based on pinhole data taken 2016 Nov 22)')
plt.xlabel('x (pix)')
plt.ylabel('y (pix)')
plt.tight_layout()
plt.show()
