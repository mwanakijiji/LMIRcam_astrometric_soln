# This finds the position angles between different objects in LMIRCam data and
# compares them to 'true' angles in order to determine the directional orientation
# of the detector

# created 14 Dec 2016 by E.S.

import numpy as np
import scipy
from astropy.io import fits
import matplotlib.pyplot as plt
import photutils
from photutils import DAOStarFinder

# dictionary with stars and their positions in pixel space specific to
# each dither median

# note all the found centroids (true and false positives) have been pickled in a binary file

######################################################
# dictionaries with all the positions of true stars in each dither median image

detector_star_pos_dither_pos_0 = {
    "beta": [ 1278.77543474, 1320.9970804 ],
    "gamma": [ 1430.93666334, 1322.57580845 ], 
    "delta": [ 1273.55056779, 1029.67652732 ],
    "epsilon": [ 1349.51822334, 938.26286875 ],
    "sigma": [ 34.32329057, 1035.99366435 ]
}


detector_star_pos_dither_pos_1 = {
    "beta": [ 1494.83417109, 1158.32330349 ],
    "delta": [ 1489.15063578, 867.05557534 ],
    "epsilon": [ 1564.57084883, 775.90279951 ],
    "sigma": [ 250.39790634, 873.1764211 ]
}


detector_star_pos_dither_pos_2 = {} # no useful baselines in this dither


detector_star_pos_dither_pos_3 = {
    "zeta": [ 646.0806408, 1394.03423163 ],
    "eta": [ 831.16669266, 1424.42426591 ],
    "theta": [ 1294.84738519, 1396.59477603 ]
}


detector_star_pos_dither_pos_4 = {
    "D2": [ 161.80662043, 1219.07114255 ],
    "zeta": [ 871.04551665, 1246.11397877 ],
    "eta": [ 1055.49264695, 1278.34187839 ],
    "theta": [ 1520.53672728, 1249.9000294 ],
    "sigma": [ 915.50243811, 420.80227143 ]
}


detector_star_pos_dither_pos_5 = {
    "D2": [ 388.06814022, 1078.17689859 ],
    "zeta": [ 1097.01870031, 1105.44197087 ],
    "eta": [ 1281.24396884, 1136.84787458 ],
    "theta": [ 1747.36109572, 1109.48549406 ],
    "sigma": [ 1142.77871476, 280.20717649 ]
}


detector_star_pos_dither_pos_6 = {
    "D2": [ 623.05894952, 945.58783417 ],
    "sigma": [ 1378.0252694, 149.03119895 ]
}


detector_star_pos_dither_pos_7 = {
    "D2": [ 260.82918971, 863.17440254 ],
    "zeta": [ 970.22724374, 891.19689695 ],
    "theta": [ 1619.54197816, 894.55645244 ],
    "sigma": [ 1017.48077575, 67.74322368 ]
}


detector_star_pos_dither_pos_8 = {
    "D2": [ 268.39410695, 866.42409421 ],
    "theta": [ 1626.62154931, 898.05974716 ]
}


detector_star_pos_dither_pos_9 = {
    "B1": [ 1468.3469216, 1729.63239681 ],
    "B2": [ 1554.27095054, 1707.74522771 ],
    "zeta": [ 619.28447452, 802.77405726 ],
    "eta": [ 802.37654042, 833.40172288 ],
    "theta": [ 1267.61175361, 805.3130301 ]
}


detector_star_pos_dither_pos_10 = {
    "B1": [ 1109.60884172, 1631.33099305 ],
    "B2": [ 1195.36298066, 1609.53788767 ],
    "zeta": [ 263.09348992, 704.86976588 ],
    "eta": [ 447.43134426, 736.14584106 ],
    "theta": [ 911.37798525, 707.22974711 ],
    "E1": [ 1622.75226422, 1349.94401585 ],
    "A1": [ 1556.35404063, 929.41360769]
}


detector_star_pos_dither_pos_11 = {
    "B1": [ 752.41186969, 1526.55925515 ],
    "B2": [ 838.11725978, 1504.50337841 ],
    "beta": [ 1194.64599105, 61.37835351 ],
    "theta": [ 554.36176368, 603.35113074 ],
    "E1": [ 1265.22196811, 1245.174892 ],
    "A1": [ 1198.64372109, 824.78809778 ]
}


detector_star_pos_dither_pos_12 = {
    "B1": [ 627.9749373, 1287.25096115 ],
    "B2": [ 713.98189207, 1264.87224362 ],
    "theta": [ 431.58300764, 364.45026387 ],
    "E1": [ 1140.66986209, 1005.94140448 ],
    "A1": [ 1075.2046255, 585.79380025 ]
}


detector_star_pos_dither_pos_13 = {
    "B1": [ 505.51340081, 1042.9600791 ],
    "B2": [ 591.27823717, 1021.12844839 ],
    "theta": [ 308.31797276, 120.49831303 ],
    "E1": [ 1018.15728133, 761.72791744 ],
    "A1": [ 952.59468061, 341.54887559 ]
}


detector_star_pos_dither_pos_14 = {
    "B1": [ 388.75557516, 802.82127489 ],
    "B2": [ 474.41997228, 780.90329529 ],
    "E1": [ 901.41867217, 522.01639754 ],
    "A1": [ 835.85676622, 101.6476346 ]
}


detector_star_pos_dither_pos_15 = {
    "B1": [ 272.10697931, 560.18210666 ],
    "B2": [ 358.38133726, 538.27847944 ],
    "E1": [ 785.45682778, 279.2418408 ]
}


detector_star_pos_dither_pos_16 = {
    "B2": [ 257.59547847, 291.42699017 ],
    "E1": [ 685.11940769, 32.18144383 ]
}


detector_star_pos_dither_pos_17 = {} # no useful baselines in this dither

######################################################
# dictionary with position vectors of stars according to Close+ 2012 ApJ 749:180
# entries contain
# [0]: RA, in seconds (prefix '5:35:' to get full RA)
# [1]: DEC, in seconds of arc (prefix '-5:23:' to get full DEC)

true_star_pos = {
    "beta": [15.8337, 22.4207],
    "gamma": [15.7255, 22.4347],
    "delta": [15.8408, 25.5078],
    "epsilon": [15.7879, 26.5168],
    "zeta": [16.7469, 16.3777],
    "eta": [16.6148, 16.0836],
    "theta": [16.283, 16.512],
    "sigma": [16.7236, 25.1688],
    "B2": [16.069, 6.96452],
    "A1": [15.8202, 14.2891],
    "B1": [16.1299, 6.71895],
    "D2": [17.1675, 17.0013],
    "E1": [15.7673, 9.82764]
}

# fcn returns degrees DEC south
def deg_DEC_south(secsDECPass):
    degreesDECSouthPass = 5.*15.+23./60.+secsDECPass/3600. # note this is 'positive south'

    return degreesDECSouthPass


# fcn returns distance in RA, in sky-projected arcsecs
# INPUT: Close+ 2012 listed tails of RA of both objects, and tail of DEC
def delta_RA(obj1Pass, obj2Pass, lmir=False):
    
    if not lmir:
        if (obj1Pass[1] < obj2Pass[1]): # choose object further N as 'final', that further S as 'initial'; note that DEC is positive S here
            objHigh = obj1Pass
            objLow = obj2Pass
        else:
            objHigh = obj2Pass
            objLow = obj1Pass
            
        ra_f = objHigh[0]*15. # factor of 15 to convert from sec LST to arcsec of RA
        dec_f = objHigh[1]
        ra_i = objLow[0]*15.
        dec_i = objLow[1]
        
        avgDec = 0.5*(dec_i+dec_f)
        degreesDECSouth = 5.+23./60.+avgDec/3600. # note this is 'positive south'
        diff = np.multiply((ra_f-ra_i),np.cos(degreesDECSouth*np.pi/180.))
        
    if lmir: # if in pixel space, where higher y means further N
        if (obj1Pass[1] > obj2Pass[1]):
            objHigh = obj1Pass
            objLow = obj2Pass
        else:
            objHigh = obj2Pass
            objLow = obj1Pass
            
        ra_f = objHigh[0]
        dec_f = objHigh[1]
        ra_i = objLow[0]
        dec_i = objLow[1]
        
        avgDec = 16.5 # close enough; this is the value for star 'sigma'
        degreesDECSouth = 5.+23./60.+avgDec/3600. # note this is 'positive south'
        diff = np.multiply((ra_f-ra_i),np.cos(degreesDECSouth*np.pi/180.))
        diff = -diff*lmir_plate_scale # convert to asec and add sign change (RA goes + as pixels go - in x)
        
    return diff


# fcn returns distance in DEC
# INPUT: Close+ 2012 listed tails of DEC of both objects
def delta_DEC(obj1Pass, obj2Pass, lmir=False):
    
    if not lmir:
        if (obj1Pass[1] < obj2Pass[1]): # choose object further N as 'final', that further S as 'initial'; note that DEC is positive S here
            objHigh = obj1Pass
            objLow = obj2Pass
        else:
            objHigh = obj2Pass
            objLow = obj1Pass
            
        dec_f = objHigh[1]
        dec_i = objLow[1]
        diff = -(dec_f-dec_i) # negative sign since the DEC values here are 'positive S'
    
    if lmir: # if in pixel space, where +y means further N
        if (obj1Pass[1] > obj2Pass[1]):
            objHigh = obj1Pass
            objLow = obj2Pass
        else:
            objHigh = obj2Pass
            objLow = obj1Pass
        
        dec_f = objHigh[1]
        dec_i = objLow[1]
        diff = (dec_f-dec_i) # in pixel space, where +y means N
        diff = diff*lmir_plate_scale # convert to asec
    
    return diff


# fcn returns distance between the two objects and the angle theta (from del_x del_y)
# convention here is 'positive angle W of N' (where the image has already been derotated so PA=0)
def dist_and_theta(star1Pass, star2Pass, lmir=False):

    thetaRad = np.arctan(np.divide(delta_RA(star1Pass, star2Pass, lmir=lmir),
                                    delta_DEC(star1Pass, star2Pass, lmir=lmir)))
    thetaDegPass = thetaRad*180./np.pi
    distancePass = np.sqrt(delta_DEC(star1Pass, star2Pass, lmir=lmir)**2 + 
                           delta_RA(star1Pass, star2Pass, lmir=lmir)**2)
    
    return distancePass, thetaDegPass # asec, deg W of N (at 0 deg PA)


# stars to compare
#star1 = "beta"
#star2 = "gamma"

#def compare_lmir_and_true(lmirTargetPass, trueTargetPass):
#    difference = np.subtract(dist_and_theta(target1Pass, target2Pass, lmir=True),
#                             dist_and_theta(target1Pass, target2Pass, lmir=False))

######################################################
# dictionaries with all position difference vectors from stars in the dither median images

dither_pos_0_baselines = {
    
    "dp_0_del_beta_gamma": np.subtract(detector_star_pos_dither_pos_0["beta"],
                  detector_star_pos_dither_pos_0["gamma"]),
    "dp_0_del_beta_delta": np.subtract(detector_star_pos_dither_pos_0["beta"],
                  detector_star_pos_dither_pos_0["delta"]),
    "dp_0_del_beta_epsilon": np.subtract(detector_star_pos_dither_pos_0["beta"],
                  detector_star_pos_dither_pos_0["epsilon"]),
    "dp_0_del_beta_sigma": np.subtract(detector_star_pos_dither_pos_0["beta"],
                  detector_star_pos_dither_pos_0["sigma"]),
    
    "dp_0_del_gamma_delta": np.subtract(detector_star_pos_dither_pos_0["gamma"],
                  detector_star_pos_dither_pos_0["delta"]),   
    "dp_0_del_gamma_epsilon": np.subtract(detector_star_pos_dither_pos_0["gamma"],
                  detector_star_pos_dither_pos_0["epsilon"]),  
    "dp_0_del_gamma_sigma": np.subtract(detector_star_pos_dither_pos_0["gamma"],
                  detector_star_pos_dither_pos_0["sigma"]),  
    
    "dp_0_del_delta_epsilon": np.subtract(detector_star_pos_dither_pos_0["delta"],
                  detector_star_pos_dither_pos_0["epsilon"]),      
    "dp_0_del_delta_sigma": np.subtract(detector_star_pos_dither_pos_0["delta"],
                  detector_star_pos_dither_pos_0["sigma"]),  
    
    "dp_0_del_epsilon_sigma": np.subtract(detector_star_pos_dither_pos_0["epsilon"],
                  detector_star_pos_dither_pos_0["sigma"])
}


dither_pos_1_baselines = {
    
    "dp_1_del_beta_delta": np.subtract(detector_star_pos_dither_pos_1["beta"],
                  detector_star_pos_dither_pos_1["delta"]),
    "dp_1_del_beta_epsilon": np.subtract(detector_star_pos_dither_pos_1["beta"],
                  detector_star_pos_dither_pos_1["epsilon"]),
    "dp_1_del_beta_sigma": np.subtract(detector_star_pos_dither_pos_1["beta"],
                  detector_star_pos_dither_pos_1["sigma"]),  
    
    "dp_1_del_delta_epsilon": np.subtract(detector_star_pos_dither_pos_1["delta"],
                  detector_star_pos_dither_pos_1["epsilon"]),
    "dp_1_del_delta_sigma": np.subtract(detector_star_pos_dither_pos_1["delta"],
                  detector_star_pos_dither_pos_1["sigma"]),
    
    "dp_1_del_epsilon_sigma": np.subtract(detector_star_pos_dither_pos_1["epsilon"],
                  detector_star_pos_dither_pos_1["sigma"])
}


dither_pos_2_baselines = {} # none!


dither_pos_3_baselines = {
    
    "dp_3_del_zeta_eta": np.subtract(detector_star_pos_dither_pos_3["zeta"],
                  detector_star_pos_dither_pos_3["eta"]),
    "dp_3_del_zeta_theta": np.subtract(detector_star_pos_dither_pos_3["zeta"],
                  detector_star_pos_dither_pos_3["theta"]),
    
    "dp_3_del_eta_theta": np.subtract(detector_star_pos_dither_pos_3["eta"],
                  detector_star_pos_dither_pos_3["theta"])
}


dither_pos_4_baselines = {
    
    "dp_4_del_D2_zeta": np.subtract(detector_star_pos_dither_pos_4["D2"], 
                  detector_star_pos_dither_pos_4["zeta"]),
    "dp_4_del_D2_eta": np.subtract(detector_star_pos_dither_pos_4["D2"],
                  detector_star_pos_dither_pos_4["eta"]),
    "dp_4_del_D2_theta": np.subtract(detector_star_pos_dither_pos_4["D2"],
                  detector_star_pos_dither_pos_4["theta"]),
    "dp_4_del_D2_sigma": np.subtract(detector_star_pos_dither_pos_4["D2"],
                  detector_star_pos_dither_pos_4["sigma"]),
    
    "dp_4_del_zeta_eta": np.subtract(detector_star_pos_dither_pos_4["zeta"],
                  detector_star_pos_dither_pos_4["eta"]),
    "dp_4_del_zeta_theta": np.subtract(detector_star_pos_dither_pos_4["zeta"],
                  detector_star_pos_dither_pos_4["theta"]),
    "dp_4_del_zeta_sigma": np.subtract(detector_star_pos_dither_pos_4["zeta"],
                  detector_star_pos_dither_pos_4["sigma"]),
    
    "dp_4_del_eta_theta": np.subtract(detector_star_pos_dither_pos_4["eta"],
                  detector_star_pos_dither_pos_4["theta"]),
    "dp_4_del_eta_sigma": np.subtract(detector_star_pos_dither_pos_4["eta"],
                  detector_star_pos_dither_pos_4["sigma"]),
    
    "dp_4_del_theta_sigma": np.subtract(detector_star_pos_dither_pos_4["theta"],
                  detector_star_pos_dither_pos_4["sigma"])
}


dither_pos_5_baselines = {
    
    "dp_5_del_D2_zeta": np.subtract(detector_star_pos_dither_pos_5["D2"], 
                  detector_star_pos_dither_pos_5["zeta"]),
    "dp_5_del_D2_eta": np.subtract(detector_star_pos_dither_pos_5["D2"],
                  detector_star_pos_dither_pos_5["eta"]),
    "dp_5_del_D2_theta": np.subtract(detector_star_pos_dither_pos_5["D2"],
                  detector_star_pos_dither_pos_5["theta"]),
    "dp_5_del_D2_sigma": np.subtract(detector_star_pos_dither_pos_5["D2"],
                  detector_star_pos_dither_pos_5["sigma"]),
    
    "dp_5_del_zeta_eta": np.subtract(detector_star_pos_dither_pos_5["zeta"],
                  detector_star_pos_dither_pos_5["eta"]),
    "dp_5_del_zeta_theta": np.subtract(detector_star_pos_dither_pos_5["zeta"],
                  detector_star_pos_dither_pos_5["theta"]),
    "dp_5_del_zeta_sigma": np.subtract(detector_star_pos_dither_pos_5["zeta"],
                  detector_star_pos_dither_pos_5["sigma"]),
    
    "dp_5_del_eta_theta": np.subtract(detector_star_pos_dither_pos_5["eta"],
                  detector_star_pos_dither_pos_5["theta"]),
    "dp_5_del_eta_sigma": np.subtract(detector_star_pos_dither_pos_5["eta"],
                  detector_star_pos_dither_pos_5["sigma"]),
    
    "dp_5_del_theta_sigma": np.subtract(detector_star_pos_dither_pos_5["theta"],
                  detector_star_pos_dither_pos_5["sigma"])
}


dither_pos_6_baselines = {
    "dp_6_del_D2_sigma": np.subtract(detector_star_pos_dither_pos_6["D2"],
                  detector_star_pos_dither_pos_6["sigma"])
}


dither_pos_7_baselines = {
    
    "dp_7_del_D2_zeta": np.subtract(detector_star_pos_dither_pos_7["D2"], 
                  detector_star_pos_dither_pos_7["zeta"]),
    "dp_7_del_D2_theta": np.subtract(detector_star_pos_dither_pos_7["D2"],
                  detector_star_pos_dither_pos_7["theta"]),
    "dp_7_del_D2_sigma": np.subtract(detector_star_pos_dither_pos_7["D2"],
                  detector_star_pos_dither_pos_7["sigma"]),
    
    "dp_7_del_zeta_theta": np.subtract(detector_star_pos_dither_pos_7["zeta"],
                  detector_star_pos_dither_pos_7["theta"]),
    "dp_7_del_zeta_sigma": np.subtract(detector_star_pos_dither_pos_7["zeta"],
                  detector_star_pos_dither_pos_7["sigma"]),
    
    "dp_7_del_theta_sigma": np.subtract(detector_star_pos_dither_pos_7["theta"],
                  detector_star_pos_dither_pos_7["sigma"])
}


dither_pos_8_baselines = {
    "dp_8_del_D2_theta": np.subtract(detector_star_pos_dither_pos_8["D2"],
                  detector_star_pos_dither_pos_8["theta"])
}


# In[175]:

dither_pos_9_baselines = {
    
    "dp_9_del_B1_B2": np.subtract(detector_star_pos_dither_pos_9["B1"], 
                  detector_star_pos_dither_pos_9["B2"]),
    "dp_9_del_B1_zeta": np.subtract(detector_star_pos_dither_pos_9["B1"],
                  detector_star_pos_dither_pos_9["zeta"]),
    "dp_9_del_B1_eta": np.subtract(detector_star_pos_dither_pos_9["B1"],
                  detector_star_pos_dither_pos_9["eta"]),
    "dp_9_del_B1_theta": np.subtract(detector_star_pos_dither_pos_9["B1"],
                  detector_star_pos_dither_pos_9["theta"]),
    
    "dp_9_del_B2_zeta": np.subtract(detector_star_pos_dither_pos_9["B2"],
                  detector_star_pos_dither_pos_9["zeta"]),
    "dp_9_del_B2_eta": np.subtract(detector_star_pos_dither_pos_9["B2"],
                  detector_star_pos_dither_pos_9["eta"]),
    "dp_9_del_B2_theta": np.subtract(detector_star_pos_dither_pos_9["B2"],
                  detector_star_pos_dither_pos_9["theta"]),
    
    "dp_9_del_zeta_eta": np.subtract(detector_star_pos_dither_pos_9["zeta"],
                  detector_star_pos_dither_pos_9["eta"]),
    "dp_9_del_zeta_theta": np.subtract(detector_star_pos_dither_pos_9["zeta"],
                  detector_star_pos_dither_pos_9["theta"]),
    
    "dp_9_del_eta_theta": np.subtract(detector_star_pos_dither_pos_9["eta"],
                  detector_star_pos_dither_pos_9["theta"])
}


dither_pos_10_baselines = {
    
    "dp_10_del_B1_B2": np.subtract(detector_star_pos_dither_pos_10["B1"], 
                  detector_star_pos_dither_pos_10["B2"]),
    "dp_10_del_B1_zeta": np.subtract(detector_star_pos_dither_pos_10["B1"],
                  detector_star_pos_dither_pos_10["zeta"]),
    "dp_10_del_B1_eta": np.subtract(detector_star_pos_dither_pos_10["B1"],
                  detector_star_pos_dither_pos_10["eta"]),
    "dp_10_del_B1_theta": np.subtract(detector_star_pos_dither_pos_10["B1"],
                  detector_star_pos_dither_pos_10["theta"]),
    "dp_10_del_B1_E1": np.subtract(detector_star_pos_dither_pos_10["B1"],
                  detector_star_pos_dither_pos_10["E1"]),
    "dp_10_del_B1_A1": np.subtract(detector_star_pos_dither_pos_10["B1"],
                  detector_star_pos_dither_pos_10["A1"]),
    
    "dp_10_del_B2_zeta": np.subtract(detector_star_pos_dither_pos_10["B2"],
                  detector_star_pos_dither_pos_10["zeta"]),
    "dp_10_del_B2_eta": np.subtract(detector_star_pos_dither_pos_10["B2"],
                  detector_star_pos_dither_pos_10["eta"]),
    "dp_10_del_B2_theta": np.subtract(detector_star_pos_dither_pos_10["B2"],
                  detector_star_pos_dither_pos_10["theta"]),
    "dp_10_del_B2_E1": np.subtract(detector_star_pos_dither_pos_10["B2"],
                  detector_star_pos_dither_pos_10["E1"]),
    "dp_10_del_B2_A1": np.subtract(detector_star_pos_dither_pos_10["B2"],
                  detector_star_pos_dither_pos_10["A1"]),
    
    "dp_10_del_zeta_eta": np.subtract(detector_star_pos_dither_pos_10["zeta"],
                  detector_star_pos_dither_pos_10["eta"]),
    "dp_10_del_zeta_theta": np.subtract(detector_star_pos_dither_pos_10["zeta"],
                  detector_star_pos_dither_pos_10["theta"]),
    "dp_10_del_zeta_E1": np.subtract(detector_star_pos_dither_pos_10["zeta"],
                  detector_star_pos_dither_pos_10["E1"]),
    "dp_10_del_zeta_A1": np.subtract(detector_star_pos_dither_pos_10["zeta"],
                  detector_star_pos_dither_pos_10["A1"]),
    
    "dp_10_del_eta_theta": np.subtract(detector_star_pos_dither_pos_10["eta"],
                  detector_star_pos_dither_pos_10["theta"]),
    "dp_10_del_eta_E1": np.subtract(detector_star_pos_dither_pos_10["eta"],
                  detector_star_pos_dither_pos_10["E1"]),
    "dp_10_del_eta_A1": np.subtract(detector_star_pos_dither_pos_10["eta"],
                  detector_star_pos_dither_pos_10["A1"]),
    
    "dp_10_del_theta_E1": np.subtract(detector_star_pos_dither_pos_10["theta"],
                  detector_star_pos_dither_pos_10["E1"]),
    "dp_10_del_theta_A1": np.subtract(detector_star_pos_dither_pos_10["theta"],
                  detector_star_pos_dither_pos_10["A1"]),
    
    "dp_10_del_E1_A1": np.subtract(detector_star_pos_dither_pos_10["E1"],
                  detector_star_pos_dither_pos_10["A1"])
}


dither_pos_11_baselines = {
    
    "dp_11_del_B1_B2": np.subtract(detector_star_pos_dither_pos_11["B1"], 
                  detector_star_pos_dither_pos_11["B2"]),
    "dp_11_del_B1_beta": np.subtract(detector_star_pos_dither_pos_11["B1"],
                  detector_star_pos_dither_pos_11["beta"]),
    "dp_11_del_B1_theta": np.subtract(detector_star_pos_dither_pos_11["B1"],
                  detector_star_pos_dither_pos_11["theta"]),
    "dp_11_del_B1_E1": np.subtract(detector_star_pos_dither_pos_11["B1"],
                  detector_star_pos_dither_pos_11["E1"]),
    "dp_11_del_B1_A1": np.subtract(detector_star_pos_dither_pos_11["B1"],
                  detector_star_pos_dither_pos_11["A1"]),
    
    "dp_11_del_B2_beta": np.subtract(detector_star_pos_dither_pos_11["B2"],
                  detector_star_pos_dither_pos_11["beta"]),
    "dp_11_del_B2_theta": np.subtract(detector_star_pos_dither_pos_11["B2"],
                  detector_star_pos_dither_pos_11["theta"]),
    "dp_11_del_B2_E1": np.subtract(detector_star_pos_dither_pos_11["B2"],
                  detector_star_pos_dither_pos_11["E1"]),
    "dp_11_del_B2_A1": np.subtract(detector_star_pos_dither_pos_11["B2"],
                  detector_star_pos_dither_pos_11["A1"]),
    
    "dp_11_del_beta_theta": np.subtract(detector_star_pos_dither_pos_11["beta"],
                  detector_star_pos_dither_pos_11["theta"]),
    "dp_11_del_beta_E1": np.subtract(detector_star_pos_dither_pos_11["beta"],
                  detector_star_pos_dither_pos_11["E1"]),
    "dp_11_del_beta_A1": np.subtract(detector_star_pos_dither_pos_11["beta"],
                  detector_star_pos_dither_pos_11["A1"]),
    
    "dp_11_del_theta_E1": np.subtract(detector_star_pos_dither_pos_11["theta"],
                  detector_star_pos_dither_pos_11["E1"]),
    "dp_11_del_theta_A1": np.subtract(detector_star_pos_dither_pos_11["theta"],
                  detector_star_pos_dither_pos_11["A1"]),
    
    "dp_11_del_E1_A1": np.subtract(detector_star_pos_dither_pos_11["E1"],
                  detector_star_pos_dither_pos_11["A1"])
}


dither_pos_12_baselines = {
    
    "dp_12_del_B1_B2": np.subtract(detector_star_pos_dither_pos_12["B1"], 
                  detector_star_pos_dither_pos_12["B2"]),
    "dp_12_del_B1_theta": np.subtract(detector_star_pos_dither_pos_12["B1"],
                  detector_star_pos_dither_pos_12["theta"]),
    "dp_12_del_B1_E1": np.subtract(detector_star_pos_dither_pos_12["B1"],
                  detector_star_pos_dither_pos_12["E1"]),
    "dp_12_del_B1_A1": np.subtract(detector_star_pos_dither_pos_12["B1"],
                  detector_star_pos_dither_pos_12["A1"]),
    
    "dp_12_del_B2_theta": np.subtract(detector_star_pos_dither_pos_12["B2"],
                  detector_star_pos_dither_pos_12["theta"]),
    "dp_12_del_B2_E1": np.subtract(detector_star_pos_dither_pos_12["B2"],
                  detector_star_pos_dither_pos_12["E1"]),
    "dp_12_del_B2_A1": np.subtract(detector_star_pos_dither_pos_12["B2"],
                  detector_star_pos_dither_pos_12["A1"]),
    
    "dp_12_del_theta_E1": np.subtract(detector_star_pos_dither_pos_12["theta"],
                  detector_star_pos_dither_pos_12["E1"]),
    "dp_12_del_theta_A1": np.subtract(detector_star_pos_dither_pos_12["theta"],
                  detector_star_pos_dither_pos_12["A1"]),
    
    "dp_12_del_E1_A1": np.subtract(detector_star_pos_dither_pos_12["E1"],
                  detector_star_pos_dither_pos_12["A1"])
}


dither_pos_13_baselines = {
    
    "dp_13_del_B1_B2": np.subtract(detector_star_pos_dither_pos_13["B1"], 
                  detector_star_pos_dither_pos_13["B2"]),
    "dp_13_del_B1_theta": np.subtract(detector_star_pos_dither_pos_13["B1"],
                  detector_star_pos_dither_pos_13["theta"]),
    "dp_13_del_B1_E1": np.subtract(detector_star_pos_dither_pos_13["B1"],
                  detector_star_pos_dither_pos_13["E1"]),
    "dp_13_del_B1_A1": np.subtract(detector_star_pos_dither_pos_13["B1"],
                  detector_star_pos_dither_pos_13["A1"]),
    
    "dp_13_del_B2_theta": np.subtract(detector_star_pos_dither_pos_13["B2"],
                  detector_star_pos_dither_pos_13["theta"]),
    "dp_13_del_B2_E1": np.subtract(detector_star_pos_dither_pos_13["B2"],
                  detector_star_pos_dither_pos_13["E1"]),
    "dp_13_del_B2_A1": np.subtract(detector_star_pos_dither_pos_13["B2"],
                  detector_star_pos_dither_pos_13["A1"]),
    
    "dp_13_del_theta_E1": np.subtract(detector_star_pos_dither_pos_13["theta"],
                  detector_star_pos_dither_pos_13["E1"]),
    "dp_13_del_theta_A1": np.subtract(detector_star_pos_dither_pos_13["theta"],
                  detector_star_pos_dither_pos_13["A1"]),
    
    "dp_13_del_E1_A1": np.subtract(detector_star_pos_dither_pos_13["E1"],
                  detector_star_pos_dither_pos_13["A1"])
}


dither_pos_14_baselines = {
    
    "dp_14_del_B1_B2": np.subtract(detector_star_pos_dither_pos_14["B1"], 
                  detector_star_pos_dither_pos_14["B2"]),
    "dp_14_del_B1_E1": np.subtract(detector_star_pos_dither_pos_14["B1"],
                  detector_star_pos_dither_pos_14["E1"]),
    "dp_14_del_B1_A1": np.subtract(detector_star_pos_dither_pos_14["B1"],
                  detector_star_pos_dither_pos_14["A1"]),
    
    "dp_14_del_B2_E1": np.subtract(detector_star_pos_dither_pos_14["B2"],
                  detector_star_pos_dither_pos_14["E1"]),
    "dp_14_del_B2_A1": np.subtract(detector_star_pos_dither_pos_14["B2"],
                  detector_star_pos_dither_pos_14["A1"]),
    
    "dp_14_del_E1_A1": np.subtract(detector_star_pos_dither_pos_14["E1"],
                  detector_star_pos_dither_pos_14["A1"])
}


dither_pos_15_baselines = {
    
    "dp_15_del_B1_B2": np.subtract(detector_star_pos_dither_pos_15["B1"], 
                  detector_star_pos_dither_pos_15["B2"]),
    "dp_15_del_B1_E1": np.subtract(detector_star_pos_dither_pos_15["B1"],
                  detector_star_pos_dither_pos_15["E1"]),
    
    "dp_15_del_B2_E1": np.subtract(detector_star_pos_dither_pos_15["B2"],
                  detector_star_pos_dither_pos_15["E1"])
}


dither_pos_16_baselines = {
    
    "dp_16_del_B2_E1": np.subtract(detector_star_pos_dither_pos_16["B2"],
                  detector_star_pos_dither_pos_16["E1"])
}


dither_pos_17_baselines = {} # none!
